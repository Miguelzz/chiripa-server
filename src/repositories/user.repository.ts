/** @format */

import mongoose, { Schema, Document } from "mongoose";
import { IUser } from "../models/user";
import { imageSchema } from "./demo.repository";

type IUserRepository = IUser & Document;

const UserSchema = new Schema({
  typeRegister: { type: Number, enum: [0, 1, 2, 3, 4] },
  state: { type: Number, enum: [0, 1, 2, 3] },
  email: { type: String },
  userName: { type: String },
  names: { type: String },
  surnames: { type: String },
  address: { type: String },
  phone: { type: String },
  gender: { type: Number, enum: [0, 1, 2] },
  authenticated: Boolean,
  facebookID: { type: String },
  googleID: { type: String },
  code: { type: Number, hide: true },
  previousCode: { type: Number, hide: true },
  prefix: {
    type: String,
    enum: [
      "93",
      "358",
      "355",
      "213",
      "1684",
      "376",
      "244",
      "1264",
      "672",
      "1268",
      "54",
      "374",
      "297",
      "61",
      "43",
      "994",
      "1242",
      "973",
      "880",
      "1246",
      "375",
      "32",
      "501",
      "229",
      "1441",
      "975",
      "591",
      "5997",
      "387",
      "267",
      "",
      "55",
      "246",
      "1284",
      "1 340",
      "673",
      "359",
      "226",
      "257",
      "855",
      "237",
      "1",
      "238",
      "1345",
      "236",
      "235",
      "56",
      "86",
      "57",
      "269",
      "242",
      "243",
      "682",
      "506",
      "385",
      "53",
      "599",
      "357",
      "420",
      "45",
      "253",
      "1767",
      "1809",
      "1829",
      "1849",
      "593",
      "20",
      "503",
      "240",
      "291",
      "372",
      "251",
      "500",
      "298",
      "679",
      "33",
      "594",
      "689",
      "241",
      "220",
      "995",
      "49",
      "233",
      "350",
      "30",
      "299",
      "1473",
      "590",
      "1671",
      "502",
      "44",
      "224",
      "245",
      "592",
      "509",
      "379",
      "504",
      "852",
      "36",
      "354",
      "91",
      "62",
      "225",
      "98",
      "964",
      "353",
      "972",
      "39",
      "1876",
      "81",
      "962",
      "76",
      "77",
      "254",
      "686",
      "965",
      "996",
      "856",
      "371",
      "961",
      "266",
      "231",
      "218",
      "423",
      "370",
      "352",
      "853",
      "389",
      "261",
      "265",
      "60",
      "960",
      "223",
      "356",
      "692",
      "596",
      "222",
      "230",
      "262",
      "52",
      "691",
      "373",
      "377",
      "976",
      "382",
      "1664",
      "212",
      "258",
      "95",
      "264",
      "674",
      "977",
      "31",
      "687",
      "64",
      "505",
      "227",
      "234",
      "683",
      "850",
      "1670",
      "47",
      "968",
      "92",
      "680",
      "970",
      "507",
      "675",
      "595",
      "51",
      "63",
      "48",
      "351",
      "1787",
      "1939",
      "974",
      "383",
      "40",
      "7",
      "250",
      "290",
      "1869",
      "1758",
      "508",
      "1784",
      "685",
      "378",
      "239",
      "966",
      "221",
      "381",
      "248",
      "232",
      "65",
      "1721",
      "421",
      "386",
      "677",
      "252",
      "27",
      "82",
      "211",
      "34",
      "94",
      "249",
      "597",
      "4779",
      "268",
      "46",
      "41",
      "963",
      "886",
      "992",
      "255",
      "66",
      "670",
      "228",
      "690",
      "676",
      "1868",
      "216",
      "90",
      "993",
      "1649",
      "688",
      "256",
      "380",
      "971",
      "598",
      "998",
      "678",
      "58",
      "84",
      "681",
      "967",
      "260",
      "263",
    ],
  },
  birthday: Date,
  sexual: { type: Number, enum: [0, 1, 2, 3, 4, 5, 6, 7] },
  photo: imageSchema,
  country: { type: Schema.Types.ObjectId, ref: "Country" },
  city: { type: Schema.Types.ObjectId, ref: "City" },
  apps: [{ type: Schema.Types.ObjectId, ref: "App" }],
});

UserSchema.set("toJSON", {
  transform(doc: any, ret: any, options: any) {
    delete ret._id;
    delete ret.__v;
    delete ret.authenticated;
    delete ret.code;
    delete ret.previousCode;
    delete ret.typeRegister;
    delete ret.token;
  },
});

export const User = mongoose.model<IUserRepository>("User", UserSchema);
